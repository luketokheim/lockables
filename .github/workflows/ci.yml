name: Continuous Integration

on:
  push:
    branches: [main]

  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - name: Install codespell
      run: pipx install codespell

    - name: Lint
      run: cmake -D FORMAT_COMMAND=clang-format-14 -P cmake/lint.cmake

    - name: Spell check
      if: always()
      run: cmake -P cmake/spell.cmake

  coverage:
    needs: [lint]

    runs-on: ubuntu-22.04

    if: github.repository_owner == 'luketokheim'

    steps:
    - uses: actions/checkout@v3

    - name: Install LCov
      run: sudo apt-get update -q
        && sudo apt-get install lcov -q -y

    - name: Install dependencies
      run: |
        pipx install conan
        bash < .github/scripts/conan-profile.sh
        conan install . -b missing -s build_type=Debug -o developer_mode=True

    - name: Configure
      run: cmake --preset=ci-coverage

    - name: Build
      run: cmake --build build/coverage -j 2

    - name: Test
      working-directory: build/coverage
      run: ctest --output-on-failure --no-tests=error -j 2

    - name: Process coverage info
      run: cmake --build build/coverage -t coverage

    - name: Submit to codecov.io
      uses: codecov/codecov-action@v3
      with:
        file: build/coverage/coverage.info

  sanitize:
    needs: [lint]

    strategy:
      matrix:
        sanitizer: [address, thread]

    runs-on: ubuntu-22.04

    env:
      CC: clang-14
      CXX: clang++-14

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        pipx install conan
        bash < .github/scripts/conan-profile.sh
        conan install . -b missing -s build_type=RelWithDebInfo -o developer_mode=True

    - name: Configure
      run: cmake --preset=ci-sanitize-${{ matrix.sanitizer }}

    - name: Build
      run: cmake --build build/sanitize -j 2

    - name: Test
      working-directory: build/sanitize
      env:
        ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1"
        UBSAN_OPTIONS: print_stacktrace=1
        TSAN_OPTIONS: halt_on_error=1:second_deadlock_stack=1
      run: ctest --output-on-failure --no-tests=error -j 2

  test:
    needs: [lint]

    strategy:
      fail-fast: false

      matrix:
        os: [macos-12, ubuntu-22.04, windows-2022]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Install static analyzers
      if: matrix.os == 'ubuntu-22.04'
      run: >-
        sudo apt-get install cppcheck -y -q

        sudo update-alternatives --install
        /usr/bin/clang-tidy clang-tidy
        /usr/bin/clang-tidy-14 140

    - name: Install dependencies
      shell: bash
      run: |
        pipx install conan==2.0.2
        bash < .github/scripts/conan-profile.sh
        conan install . -b missing -o developer_mode=True

    - name: Setup MultiToolTask
      if: matrix.os == 'windows-2022'
      run: |
        Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
        Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

    - name: Configure
      shell: pwsh
      run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"

    - name: Build
      run: cmake --build build --config Release -j 2

    - name: Install
      run: cmake --install build --config Release --prefix prefix

    - name: Test
      working-directory: build
      run: ctest --output-on-failure --no-tests=error -C Release -j 2
